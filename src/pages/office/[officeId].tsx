import { Collapse, ScrollBar, WebsiteList } from "@/components";
import { prisma } from "@/server/db";
import {
  getCategoryId,
  getCategoryInfo,
  getDepartmentId,
  getDepartmentInfo,
  getOfficesInfo,
  getWebsiteInfo,
} from "@/server/query";
import { NotFound } from "@/services/global";
import { type PageProps } from "@/types/props";
import { type Office } from "@prisma/client";
import { type GetStaticPaths, type GetStaticProps, type NextPage } from "next";
import Head from "next/head";

const Office: NextPage<PageProps> = ({
  websites,
  offices,
  departments,
  categories,
  officeId,
  departmentId,
  categoryId,
}) => {
  return (
    <>
      <Head>
        <title>Web Archive</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-12 font-serif">
        <h1 className="text-5xl font-black">國立陽明交通大學網站典藏庫</h1>
        <h1 className="mb-10 py-3 px-4 text-xl">
          National Yang Ming Chiao Tung University Web Archiving System
        </h1>
        <div className="flex max-w-full gap-3">
          <Collapse items={categories} activeId={categoryId}>
            Category
          </Collapse>
          <div className="min-w-0 flex-1">
            <ScrollBar offices={offices} activeId={officeId} />
            <WebsiteList websites={websites} />
          </div>
          <div className="px-10">
            <Collapse items={departments} activeId={departmentId}>
              Department
            </Collapse>
          </div>
        </div>
      </main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const officeList = await prisma.office.findMany();
  return {
    paths: officeList.map((office) => {
      return {
        params: { officeId: office.id },
      };
    }),
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps<PageProps> = async (context) => {
  const officeId = context.params?.officeId as string;

  const categoryId = await getCategoryId(officeId).catch(console.error);

  if (!categoryId) {
    return NotFound;
  }

  const departmentId = await getDepartmentId(officeId).catch(console.error);

  if (!departmentId) {
    return NotFound;
  }

  const infoRes = await Promise.all([
    getCategoryInfo(),
    getDepartmentInfo(categoryId),
    getOfficesInfo(departmentId),
    getWebsiteInfo(officeId),
  ]).catch(console.error);

  if (!infoRes) {
    return NotFound;
  }

  const [categories, departments, offices, websites] = infoRes;

  return {
    props: {
      websites: websites.map((web) => {
        return { ...web, updatedAt: web.updatedAt.toISOString() };
      }),
      offices,
      departments,
      categories,
      officeId,
      departmentId,
      categoryId,
    },
    revalidate: 1000,
  };
};

export default Office;
